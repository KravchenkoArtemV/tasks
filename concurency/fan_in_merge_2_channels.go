package main

import (
	"fmt"
	"sync"
)

func main() {
	wg := &sync.WaitGroup{} // создаём группу ожидания для синхронизации завершения горутин

	// каналы: два входных и один выходной
	ch1 := make(chan int)
	ch2 := make(chan int)
	out := make(chan int)

	// запускаем первую горутину — пишет чётные числа в ch1
	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := 0; i < 10; i += 2 {
			ch1 <- i
		}
		close(ch1) // обязательно закрываем, чтобы читатель знал, что данных больше не будет
	}()

	// запускаем вторую горутину — пишет нечётные числа в ch2
	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := 1; i < 10; i += 2 {
			ch2 <- i
		}
		close(ch2) // закрываем ch2 после завершения
	}()

	// третья горутина — объединяет оба канала в один (fan-in)
	go func() {
		// работаем, пока оба канала не закрыты
		for ch1 != nil || ch2 != nil {
			select {
			case v, ok := <-ch1:
				if !ok {
					ch1 = nil // помечаем канал как закрытый
					continue
				}
				out <- v // отправляем в выходной канал
			case v, ok := <-ch2:
				if !ok {
					ch2 = nil // помечаем канал как закрытый
					continue
				}
				out <- v // отправляем в выходной канал
			}
		}
		close(out) // закрываем выходной канал, когда оба входных закрыты
	}()

	// читаем и выводим данные из канала out
	for v := range out {
		fmt.Println(v)
	}

	wg.Wait() // ждём завершения обеих горутин-писателей
}
